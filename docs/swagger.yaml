basePath: /v1
definitions:
  errors.AppError:
    properties:
      code:
        type: integer
      details:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  model.SongRequestCreate:
    properties:
      band:
        type: string
      name:
        type: string
    required:
    - band
    - name
    type: object
  model.SongRequestDelete:
    properties:
      band:
        type: string
      id:
        type: integer
      lyrics:
        type: string
      name:
        type: string
    type: object
  model.SongRequestUpdate:
    properties:
      band:
        type: string
      id:
        type: integer
      lyrics:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  model.Verse:
    properties:
      band:
        type: string
      lines:
        items:
          type: string
        type: array
      number:
        type: integer
      song:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a simple restful service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /song:
    delete:
      consumes:
      - application/json
      description: Delete a song by its ID
      parameters:
      - description: Song to delete
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/model.SongRequestDelete'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request, invalid data
          schema:
            $ref: '#/definitions/errors.AppError'
      summary: Delete a song
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Create a new song record in the database with the provided details.
      parameters:
      - description: Song data to be created
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/model.SongRequestCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created song
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or request
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.AppError'
      summary: Create a new song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update an existing song record with the provided details.
      parameters:
      - description: Song data to be updated
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/model.SongRequestUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or request
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.AppError'
      summary: Update song information
      tags:
      - songs
  /song/pages:
    get:
      consumes:
      - application/json
      description: Retrieve a list of songs based on filtering criteria and pagination
        options.
      parameters:
      - in: query
        name: band
        type: string
      - in: query
        name: id
        type: integer
      - in: query
        name: lyrics
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: number
        type: integer
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved filtered songs list
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or request
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.AppError'
      summary: Get filtered and paginated list of songs
      tags:
      - songs
  /song/verses:
    get:
      consumes:
      - application/json
      description: Retrieve all verses of a song based on the song details and pagination
        options provided.
      parameters:
      - in: query
        name: band
        type: string
      - in: query
        name: id
        type: integer
      - in: query
        name: lyrics
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: number
        type: integer
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of song verses
          schema:
            items:
              $ref: '#/definitions/model.Verse'
            type: array
        "400":
          description: Invalid input or request
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.AppError'
      summary: Get verses of a song
      tags:
      - songs
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
